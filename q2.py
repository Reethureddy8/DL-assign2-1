# -*- coding: utf-8 -*-
"""Q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZKha9Dcw_4QpmGo6xcmfYv3Ij9o3CPqu
"""

!pip install transformers datasets evaluate openpyxl --quiet

import pandas as pd

file_path = '/content/Billie_Eilish_Lyrics.xlsx'
df = pd.read_excel(file_path, sheet_name='Lyrics')

import pandas as pd
df = pd.read_excel('Billie_Eilish_Lyrics.xlsx', sheet_name='Lyrics')
df_clean = df[['Lyrics']].dropna().drop_duplicates()
text_data = "\n\n".join(df_clean['Lyrics'].tolist())
with open("lyrics_data.txt", "w", encoding="utf-8") as f:
    f.write(text_data)

from datasets import Dataset
from transformers import GPT2Tokenizer
dataset = Dataset.from_dict({"text": [text_data]})
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
tokenizer.pad_token = tokenizer.eos_token
def tokenize_function(examples):
    return tokenizer(examples["text"], return_special_tokens_mask=True)
tokenized_dataset = dataset.map(tokenize_function, batched=True, remove_columns=["text"])

block_size = 128

def group_texts(examples):
    concatenated = {k: sum(examples[k], []) for k in examples.keys()}
    total_length = len(concatenated["input_ids"])
    total_length = (total_length // block_size) * block_size
    result = {
        k: [t[i : i + block_size] for i in range(0, total_length, block_size)]
        for k, t in concatenated.items()
    }
    return result

lm_dataset = tokenized_dataset.map(group_texts, batched=True)

import os
os.environ["WANDB_DISABLED"] = "true"

import torch
from transformers import GPT2LMHeadModel, DataCollatorForLanguageModeling, Trainer, TrainingArguments
model = GPT2LMHeadModel.from_pretrained("gpt2")
model.resize_token_embeddings(len(tokenizer))
data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)
training_args = TrainingArguments(
    output_dir="./gpt2-lyrics",
    overwrite_output_dir=True,
    num_train_epochs=3,
    per_device_train_batch_size=2,
    save_steps=500,
    save_total_limit=2,
    logging_steps=100,
    prediction_loss_only=True,
    fp16=torch.cuda.is_available(),
)
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=lm_dataset,
    tokenizer=tokenizer,
    data_collator=data_collator,
)
trainer.train()

trainer.save_model("./gpt2-lyrics")
tokenizer.save_pretrained("./gpt2-lyrics")
print("Model saved to ./gpt2-lyrics")

from transformers import pipeline

generator = pipeline("text-generation", model="./gpt2-lyrics", tokenizer=tokenizer)
prompt = "I want it that way"
output = generator(prompt, max_length=100, num_return_sequences=1)[0]['generated_text']
print("Generated Lyrics:\n", output)